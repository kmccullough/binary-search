{"version":3,"file":"index.js","names":["binarySearch","left","right","config","EPSILON","Number","_leftmost","_rightmost","_positiveDirection","_direction","_value","_floatValue","_best","_index","feq","a","b","Math","abs","it","_epsilon","getNextValue","fn","_getNextValue","integer","_float","float","epsilon","splitRatio","ratio","_ratio","startNext","_startPos","startLeft","startRight","startLow","startHigh","done","promote","lower","higher","nextValue","value","_nextValue","leftBound","rightBound","index","floatValue","best","lowBound","highBound","isLeft","isRight","isLow","isHigh","positiveDirection","Symbol","iterator","undefined","previousValue","i","hasNextValue","hasEdgeValue","round","search","comparator","clone","getNextValueByHalf","isSet","iterable"],"sources":["../src/index.js"],"sourcesContent":["/**\n * @name BinarySearchGetNextValue\n * @function\n * @param {number} left\n * @param {number} right\n * @param {number} index\n * @param {BinarySearchIterator} iterable\n * @return number\n */\n/**\n * @name BinarySearchIterator\n * @implements Iterable\n * @property {function(BinarySearchGetNextValue): BinarySearchIterator} getNextValue Set function to return next value\n * @property {function(number): BinarySearchIterator} splitRatio Set ratio between left (0) and right (1) to choose next value (default: .5) Note: Used exclusively by default `getNextValue` implementation\n * @property {function: BinarySearchIterator}         integer    Call to force rounding of values (toggles float, defaults to integer)\n * @property {function: BinarySearchIterator}         float      Call to force no rounding of values (toggles integer, defaults to integer)\n * @property {function: BinarySearchIterator}         startNext  Call to start iteration with next value (i.e. between left and right) (default: startNext)\n * @property {function: BinarySearchIterator}         startLeft  Call to start iteration with leftmost value (default: startNext)\n * @property {function: BinarySearchIterator}         startRight Call to start iteration with rightmost value (default: startNext)\n * @property {function: BinarySearchIterator}         startLow   Call to start iteration with lower of left or right (default: startLeft)\n * @property {function: BinarySearchIterator}         startHigh  Call to start iteration with higher of left or right  (default: startLeft)\n * @property {function(number): BinarySearchIterator} epsilon    Set epsilon for float comparisons\n * @property {function: BinarySearchIterator}         promote    Call to set value as current best\n * @property {function: BinarySearchIterator}         done       Call to end iteration\n * @property {function: BinarySearchIterator}         left       Call to make next iteration left of current value\n * @property {function: BinarySearchIterator}         right      Call to make next iteration right of current value\n * @property {function: BinarySearchIterator}         lower      Call to make next iteration lower than current value\n * @property {function: BinarySearchIterator}         higher     Call to make next iteration higher than current value\n * @property {function: BinarySearchIterator}         nextValue  Call to set specific next iteration value\n * @property {function: BinarySearchIterator}         clone      Call to return a copy of the iteratable with the same configuration\n * @property {function(function(value: number, index: number, BinarySearchIterator), best: Boolean = false): number|undefined} search Call to iterate using a comparator function. Pass true for `best` argument to return last best value rather than last value.\n * @property {number}           index             Current iteration index\n * @property {number}           value             Current value (optionally rounded to integer)\n * @property {number}           floatValue        Current value\n * @property {number|undefined} best              Current best value\n * @property {number}           leftBound         Current left bound\n * @property {number}           rightBound        Current right bound\n * @property {number}           lowBound          Current low bound\n * @property {number}           highBound         Current high bound\n * @property {boolean}          isLeft            True if current value is left bound\n * @property {boolean}          isRight           True if current value is right bound\n * @property {boolean}          isLow             True if current value is low bound\n * @property {boolean}          isHigh            True if current value is high bound\n * @property {boolean}          ratio             Given `splitRatio` (default .5)\n * @property {boolean}          positiveDirection -1 if left > right, otherwise 1\n */\n/**\n * @name BinarySearchConfig\n * @property {true} [startLeft] True to start iteration with leftmost value (default: startNext)\n * @property {true} [startRight] True to start iteration with rightmost value (default: startNext)\n * @property {number} [ratio] Ratio between left (0) and right (1) used to choose next value (default: .5) Note: Used exclusively by default `getNextValue` implementation\n * @property {BinarySearchGetNextValue} [getNextValue] Function to return next value\n * @property {number} [epsilon] Epsilon for float comparisons\n * @property {true} [float] True to force no rounding of values (defaults to integer)\n */\n/**\n * Creates and allows control of a binary search iterator\n * @param {number} left  Left bounding number\n * @param {number} right Right bounding number\n * @param {BinarySearchIterator|BinarySearchConfig} config\n * @return {BinarySearchIterator|number} Iterable if you prefer, or final value if comparator given\n */\nexport function binarySearch(left, right, config = {}) {\n  const EPSILON = Number.EPSILON * 10;\n  let _leftmost = left;\n  let _rightmost = right;\n  let _positiveDirection = left > right ? -1 : 1;\n  let _direction, _value, _floatValue, _best, _index;\n\n  const feq = (a, b) => Math.abs(a - b) < it._epsilon;\n  const getNextValue = fn => { it._getNextValue = fn || getNextValue; return it };\n  const integer = () => { it._float = false; return it };\n  const float = () => { it._float = true; return it };\n  const epsilon = (epsilon = EPSILON) => { it._epsilon = epsilon; return it };\n\n  /** @type BinarySearchIterator */\n  const it = {\n\n    // Call before iterating\n    splitRatio(ratio = .5) { it._ratio = ratio || it._ratio; return it },\n    getNextValue,\n    integer,\n    float,\n    startNext()  { it._startPos = 0; return it },\n    startLeft()  { it._startPos = -1; return it },\n    startRight() { it._startPos = 1; return it },\n    startLow()   { it._startPos = -_positiveDirection; return it },\n    startHigh()  { it._startPos = _positiveDirection; return it },\n    epsilon,\n\n    // Call during iteration\n    done()           { _direction = 0; return it },\n    promote()        { _best = _value; return it },\n    left()           { _direction = -1; return it },\n    right()          { _direction = 1; return it },\n    lower()          { _direction = -_positiveDirection; return it },\n    higher()         { _direction = _positiveDirection; return it },\n    nextValue(value) { it._nextValue = value; return it },\n\n    get leftBound()   { return left },\n    get rightBound()  { return right },\n    get index()       { return _index },\n    get value()       { return _value },\n    get floatValue()  { return _floatValue },\n    get best()        { return _best },\n    get lowBound()    { return _positiveDirection > 0 ? left  : right },\n    get highBound()   { return _positiveDirection > 0 ? right : left },\n    get isLeft()      { return feq(_value, _leftmost) },\n    get isRight()     { return feq(_value, _rightmost) },\n    get isLow() {\n      return _positiveDirection ? it.isLeft : it.isRight;\n    },\n    get isHigh() {\n      return !_positiveDirection ? it.isLeft : it.isRight;\n    },\n    get ratio() { return it._ratio },\n    get positiveDirection() { return _positiveDirection },\n\n    // Iterator\n    [ Symbol.iterator ]: function*() {\n      // Reset values for multiple iterations\n      left = _leftmost;\n      right = _rightmost;\n      _direction = null;\n      _value = _floatValue = _best = undefined;\n\n      let value, floatValue, previousValue, i = -1;\n      let { _startPos } = it;\n\n      while (it.lowBound <= it.highBound) {\n\n        const { _nextValue } = it;\n        const hasNextValue = _nextValue !== null && _nextValue !== undefined;\n        const hasEdgeValue = _startPos;\n\n        if (!++i && hasEdgeValue) {\n          // Starting left/right, try left or right on first iteration if desired\n          floatValue = _startPos < 0 ? left : right;\n        } else if (hasNextValue) {\n          // Try next value if given\n          floatValue = _nextValue;\n          it._nextValue = undefined;\n        } else if (hasEdgeValue) {\n          // Starting left/right, try other side of desired on second iteration\n          floatValue = _startPos < 0 ? right : left;\n          _startPos = 0;\n        } else if (i === 1 && !hasEdgeValue) {\n          // Starting next, try bound on side of desired direction on second iteration\n          floatValue = _direction < 0 ? left : right;\n        } else {\n          // Get next value between current bounds\n          floatValue = it._getNextValue(left, right, i, it);\n        }\n\n        // Round to integer if needed\n        value = it._float ? floatValue : Math.round(floatValue);\n\n        // Break if same value as previous or if at bounds\n        if (previousValue !== undefined && feq(value, previousValue)\n          || (value < left || value > right)\n          || !(hasNextValue || hasEdgeValue) && i > 1 && (value === left || value === right)\n        ) {\n          break;\n        }\n\n        previousValue = value;\n        _value = value;\n        _floatValue = floatValue;\n        _index = i;\n        // Distinguish between methods and comparator return with null\n        _direction = null;\n\n        yield [ value, i, it ]; /***** YIELD *****/\n\n        // Break if done called or direction out of bounds\n        // Note: Ignore warning \"Can be simplified to true\", as above\n        // `yield` allows method calls that change `_direction`\n        if (_direction === 0 || _direction && (_direction < 0 ? it.isLeft : it.isRight)) {\n          break;\n        }\n\n        // Shrink bounds\n        if (_direction < 0) {\n          right = floatValue;\n        } else if (_direction > 0) {\n          left = floatValue;\n        }\n\n      }\n    },\n\n    // Comparator iteration\n    search(comparator, best = false) {\n      for (let [ value, index ] of it) {\n        it._direction = comparator(value, index, it) ?? it._direction;\n      }\n      return best ? _best : _value;\n    },\n\n    clone() {\n      return binarySearch(left, right, it);\n    },\n\n    _startPos: config._startPos ?? config.startLeft ? -1\n      : config.startRight ? 1 : 0, // (default: `startNext`)\n    _ratio: config.ratio ?? .5,\n    _nextValue: config._nextValue ?? config.nextValue,\n    _getNextValue: config._getNextValue ?? (\n      config.getNextValue !== getNextValue && config.getNextValue || getNextValueByHalf\n    ),\n    _epsilon: config._epsilon ?? (config.epsilon !== epsilon && config.epsilon || EPSILON),\n    _float: config._float ?? (\n      isSet(config.float) && config.float !== float ? config.float\n      : isSet(config.integer) && config.integer !== integer ? !config.integer : false\n    ),\n\n  };\n\n  return it;\n}\n\nexport function getNextValueByHalf(left, right, i, iterable) {\n  return left + (right - left) * iterable.ratio;\n}\n\nfunction isSet(value) {\n  return value !== null && value !== undefined;\n}\n\nexport default binarySearch;\n"],"mappings":"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"}